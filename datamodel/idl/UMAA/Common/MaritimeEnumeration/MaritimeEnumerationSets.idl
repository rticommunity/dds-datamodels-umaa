/**
 *
 * DISTRIBUTION STATEMENT A. Approved for public release.
 * Distribution is unlimited.
 * This software was developed by the Department of the Navy,
 * NAVSEA Unmanned and Small Combatants. It is provided under the terms of
 * use found in the LICENSE file at the source code root directory.
 *
 */

// WARNING: THIS CODE IS AUTO-GENERATED
//   DO NOT EDIT

/**
  *
  * Version 6.0
  * Date: 2024-06-06
  *
  */


#ifndef _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_MARITIMEENUMERATIONSETS
#define _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_MARITIMEENUMERATIONSETS


//@copy-c #undef ERROR
//@copy-c #undef VARIABLE_PITCH
//@copy-c #undef DELETE
//@copy-c #undef PLATFORM

module UMAA
{
  module Common
  {
    module MaritimeEnumeration
    {


        module ActivationStateEnumModule
        {
          enum ActivationStateEnumType
          {
              @doc("Indicates sensor is actively pinging and/or acquiring.")
              ACTIVE,
              @doc("Indicates sensor has detected an error that requires attention.")
              ERROR,
              @doc("Indicates sensor is unpowered.")
              OFF,
              @doc("Indicates sensor is configured and awaiting activation.")
              READY,
              @doc("Indicates sensor is powered on but not configured.")
              STANDBY
          };
        };

        module ActivationStateTargetEnumModule
        {
          enum ActivationStateTargetEnumType
          {
              @doc("Directs sensor to actively ping and/or acquire.")
              ACTIVE,
              @doc("Directs sensor to shutdown.")
              OFF,
              @doc("Directs sensor to process configuration and await activation.")
              READY,
              @doc("Directs sensor to be powered on but not configured.")
              STANDBY
          };
        };

        module AnchorActionEnumModule
        {
          enum AnchorActionEnumType
          {
              @doc("Lower the anchor.")
              LOWER,
              @doc("Raise the anchor.")
              RAISE,
              @doc("Stop anchor from lowering or raising.")
              STOP
          };
        };

        module AnchorKindEnumModule
        {
          enum AnchorKindEnumType
          {
              @doc("Anchor type is commercial stockless.")
              COMMERCIAL_STOCKLESS,
              @doc("Anchor type is danforth.")
              DANFORTH,
              @doc("Anchor type is four-fluke.")
              FOUR_FLUKE,
              @doc("Anchor type is general.")
              GENERAL,
              @doc("Anchor type is lightweight.")
              LIGHTWEIGHT,
              @doc("Anchor type is mark 2 lightweight.")
              MARK_2_LWT,
              @doc("Anchor type is mark 2 stockless.")
              MARK_2_STOCKLESS,
              @doc("Anchor type is mushroom.")
              MUSHROOM,
              @doc("Anchor type is navy type stock.")
              NAVY_TYPE_STOCK,
              @doc("Anchor type is nonmagnetic.")
              NONMAGNETIC,
              @doc("Anchor type is standard navy stockless.")
              STANDARD_NAVY_STOCKLESS,
              @doc("Anchor type is two-fluke balanced fluke.")
              TWO_FLUKE_BALANCED_FLUKE,
              @doc("Anchor type is wedge block lightweight.")
              WEDGE_BLOCK_LWT
          };
        };

        module AnchorLocationEnumModule
        {
          enum AnchorLocationEnumType
          {
              @doc("A bower anchor is carried on the bow.")
              BOWER,
              @doc("A keel anchor is housed within the hull neer the keel.")
              KEEL,
              @doc("A stern anchor is carried on the stern.")
              STERN
          };
        };

        module AnchorRodeEnumModule
        {
          enum AnchorRodeEnumType
          {
              @doc("Chain")
              CHAIN,
              @doc("Rope")
              ROPE
          };
        };

        module AnchorStateEnumModule
        {
          enum AnchorStateEnumType
          {
              @doc("Anchor is deployed.")
              DEPLOYED,
              @doc("Anchor is lowering.")
              LOWERING,
              @doc("Anchor is raising.")
              RAISING,
              @doc("Anchor is neither DEPLOYED nor STOWED, but is not in the process of LOWERING or RAISING.")
              STOPPED,
              @doc("Anchor is stowed.")
              STOWED
          };
        };

        module AutoOffModeEnumModule
        {
          enum AutoOffModeEnumType
          {
              @doc("Indicates that active elements should be turned off when abnormal conditions are indicated.")
              DEACTIVATE,
              @doc("Indicates that the sensor should be shutdown when abnormal conditions are indicated.")
              SHUTDOWN
          };
        };

        module BilgeStateEnumModule
        {
          enum BilgeStateEnumType
          {
              @doc("Fault")
              FAULT,
              @doc("Off")
              OFF,
              @doc("On")
              ON
          };
        };

        module BufferPurgeOptionEnumModule
        {
          enum BufferPurgeOptionEnumType
          {
              @doc("Drop lowest priority message on the buffer.")
              DROP_LOWEST_PRIORITY,
              @doc("Drop newest message on the buffer.")
              DROP_MOST_RECENT,
              @doc("Drop oldest message on the buffer.")
              DROP_OLDEST
          };
        };

        module COLREGSClassificationEnumModule
        {
          enum COLREGSClassificationEnumType
          {
              @doc("The vehicle is currently anchored.")
              ANCHORED,
              @doc("The vehicle is limited in its navigational capabilities by its draught.")
              CONSTRAINED_BY_DRAUGHT,
              @doc("The vehicle is fishing with nets, lines, trawls, or other fishing apparatus which restrict maneuverability. This does not include a vehicle fishing with trolling lines or other fishing apparatus which do not restrict maneuverability.")
              FISHING,
              @doc("Contact is determined to not be a vehicle (buoy, land, etc.). COLREGS does not apply.")
              NON_VESSEL,
              @doc("The vehicle, through some exceptional circumstance, is unable to maneuver as required by these rules and is therefore unable to keep out of the way of another vehicle.")
              NOT_UNDER_COMMAND,
              @doc("The vehicle is propelled by machinery.")
              POWER_DRIVEN_UNDERWAY,
              @doc("The vehicle is engaged in a pushing operation such as severely restricts the pushing vehicle and her push in their ability to deviate from their course.")
              PUSHING,
              @doc("The vehicle is restricted in her ability to maneuver means a vehicle which, from the nature of her work, is restricted in her ability to maneuver as required by these rules and is therefore unable to keep out of the way of another vehicle.")
              RESTRICTED_IN_ABILITY_TO_MANUEVER,
              @doc("The vehicle is under sail and propelling machinery, if fitted, is not being used.")
              SAILING,
              @doc("The vehicle is engaged in a towing operation that severely restricts the towing vehicle and her tow in their ability to deviate from their course.")
              TOWING
          };
        };

        module CommandStatusReasonEnumModule
        {
          enum CommandStatusReasonEnumType
          {
              @doc("Indicates a transition to the CANCELED state when the command is canceled successfully.")
              CANCELED,
              @doc("Indicates a transition to the FAILED state when the command has been interrupted by a higher priority process.")
              INTERRUPTED,
              @doc("Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to external factors.")
              OBJECTIVE_FAILED,
              @doc("Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to resource or platform failure.")
              RESOURCE_FAILED,
              @doc("Indicates a transition to the FAILED state when the commanded resource rejects the command for some reason.")
              RESOURCE_REJECTED,
              @doc("Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to processing failure.")
              SERVICE_FAILED,
              @doc("Indicates the conditions to proceed to this state have been met and a normal state transition has occurred.")
              SUCCEEDED,
              @doc("Indicates a transition to the FAILED state when the command is not acknowledged within some defined time bound.")
              TIMEOUT,
              @doc("Indicates a transition back to the ISSUED state from a non-terminal state when the command has been updated.")
              UPDATED,
              @doc("Indicates a transition to the FAILED state when the command contains missing, out-of-bounds, or otherwise invalid parameters.")
              VALIDATION_FAILED
          };
        };

        module CommsChannelOperationalStatusEnumModule
        {
          enum CommsChannelOperationalStatusEnumType
          {
              @doc("The comms channel is off.")
              OFF,
              @doc("The comms channel is on.")
              ON,
              @doc("The comms channel is operational.")
              OPERATIONAL
          };
        };

        module ConditionalOperatorEnumModule
        {
          enum ConditionalOperatorEnumType
          {
              @doc("One value is greater than another value.")
              GREATER_THAN,
              @doc("One value is greater than or equal to another value.")
              GREATER_THAN_OR_EQUAL_TO,
              @doc("One value is less than another value.")
              LESS_THAN,
              @doc("One value is less than or equal to another value.")
              LESS_THAN_OR_EQUAL_TO
          };
        };

        module ContactManeuverInfluenceEnumModule
        {
          enum ContactManeuverInfluenceEnumType
          {
              @doc("Maneuvering or not maneuvering where a determination that a collision, allision, or near-miss has occurred or is imminent.")
              COLLISION,
              @doc("Maneuvering to avoid a navigational hazard where the priority is to increase separation to avoid a likely collision or allision if no action is taken. Maneuvering requires no due regard to other influences, including mission objectives.")
              COLLISION_AVOIDANCE,
              @doc("COLREGS crossing left where the other vehicle is determined to be compliant.")
              CROSSING_LEFT_COMPLIANT,
              @doc("COLREGS crossing left where the other vehicle is determined to be non-compliant.")
              CROSSING_LEFT_NONCOMPLIANT,
              @doc("COLREGS crossing right where the other vehicle is determined to be compliant.")
              CROSSING_RIGHT_COMPLIANT,
              @doc("COLREGS crossing right where the other vehicle is determined to be non-compliant.")
              CROSSING_RIGHT_NONCOMPLIANT,
              @doc("Maneuvering to avoid a dynamic contact where there is no obstacle avoidance influence other than maintaining a prescribed minimum standoff distance.")
              DYNAMIC_AVOIDANCE,
              @doc("Contact is guiding or informing maneuvering (e.g., guide vehicle for Stationkeep or cooperating swarm member).")
              GUIDE,
              @doc("COLREGS head on where the other vehicle is determined to be compliant.")
              HEAD_ON_COMPLIANT,
              @doc("COLREGS head on where the other vehicle is determined to be non-compliant.")
              HEAD_ON_NONCOMPLIANT,
              @doc("The contact has been examined and it was determined it has no influence on the maneuvering of ownship.")
              NONE,
              @doc("COLREGS being overtaken where the other vehicle is determined to be compliant.")
              OVERTAKEN_COMPLIANT,
              @doc("COLREGS being overtaken where the other vehicle is determined to be non-compliant.")
              OVERTAKEN_NONCOMPLIANT,
              @doc("COLREGS overtaking where the other vehicle is determined to be compliant.")
              OVERTAKING_COMPLIANT,
              @doc("COLREGS overtaking where the other vehicle is determined to be non-compliant.")
              OVERTAKING_NONCOMPLIANT,
              @doc("Maneuvering to avoid a perceived future state but not in direct response to configured obstacle avoidance thresholds.")
              PREEMPTIVE,
              @doc("Maneuvering to avoid a static contact where there is no obstacle avoidance influence other than maintaining a prescribed minimum standoff distance.")
              STATIC_AVOIDANCE
          };
        };

        module ContingencyBehaviorEnumModule
        {
          enum ContingencyBehaviorEnumType
          {
              @doc("Continue the mission")
              CONTINUE,
              @doc("Finish the mission")
              FINISH,
              @doc("Return to home")
              _HOME,
              @doc("Loiter")
              LOITER,
              @doc("None")
              NONE,
              @doc("None of the above (specific to the vehicle)")
              VEHICLE_SPECIFIC
          };
        };

        module ContinuousTestEnumModule
        {
          enum ContinuousTestEnumType
          {
              @doc("Indicates that the continuous test is disabled, and/or that there is no continuous test.")
              DISABLED_NO_TEST,
              @doc("Indicates a full continuous test.")
              FULL_TEST,
              @doc("Indicates non-intrusive tests only.")
              NON_INTRUSIVE_TESTS_ONLY
          };
        };

        module CoordinationSituationalSignalEnumModule
        {
          enum CoordinationSituationalSignalEnumType
          {
              @doc("Vehicle is being overtaken.")
              AGREE_TO_BE_OVERTAKEN,
              @doc("Vehicle is turning to port.")
              ALTERING_COURSE_TO_PORT,
              @doc("Vehicle is turning to starboard.")
              ALTERING_COURSE_TO_STARBOARD,
              @doc("Vehicle is maneuvering around a blind bend.")
              BLIND_BEND_SIGNAL,
              @doc("Vehicle is in danger.")
              DANGER_SIGNAL,
              @doc("Vehicle is in distress and needs assistance.")
              IN_DISTRESS_NEED_ASSISTANCE,
              @doc("No signal active.")
              NONE,
              @doc("Vehicle is operating astern propulsion.")
              OPERATING_ASTERN_PROPULSION,
              @doc("Vehicle is maneuvering to overtake, leave vessel to port.")
              TO_OVERTAKE_LEAVE_VESSEL_TO_PORT,
              @doc("Vehicle is maneuvering to overtake, leave vessel to starboard.")
              TO_OVERTAKE_LEAVE_VESSEL_TO_STARBOARD,
              @doc("Vehicle is leaving the dock.")
              VESSEL_LEAVING_DOCK,
              @doc("Visibility restricted with vehicle stopped.")
              VISIBILITY_RESTRICTED_VEHICLE_STOPPED,
              @doc("Visibility restricted with vehicle underway.")
              VISIBILITY_RESTRICTED_VEHICLE_UNDERWAY
          };
        };

        module DirectionModeEnumModule
        {
          enum DirectionModeEnumType
          {
              @doc("Specifies that direction is the course of the vehicle, which is the direction of motion of the vehicle over the ground.")
              COURSE,
              @doc("Specifies that direction is the heading of the vehicle, which is the direction in which the vehicle's bow is pointing.")
              HEADING
          };
        };

        module DomainEnumModule
        {
          enum DomainEnumType
          {
              @doc("Air")
              AIR,
              @doc("Surface, ground")
              GROUND,
              @doc("Surface, water")
              SURFACE,
              @doc("Undersea")
              UNDERSEA
          };
        };

        module EmitterStateEnumModule
        {
          enum EmitterStateEnumType
          {
              @doc("Emissions are allowed.")
              ALLOWED,
              @doc("Emissions are secured, i.e. no emissions.")
              SECURED
          };
        };

        module EngineKindEnumModule
        {
          enum EngineKindEnumType
          {
              @doc("A diesel engine.")
              DIESEL,
              @doc("A gas engine.")
              GAS
          };
        };

        module ErrorCodeEnumModule
        {
          enum ErrorCodeEnumType
          {
              @doc("Actuator")
              ACTUATOR,
              @doc("File system")
              FILESYS,
              @doc("None")
              NONE,
              @doc("Power")
              POWER,
              @doc("Processor")
              PROCESSOR,
              @doc("RAM")
              RAM,
              @doc("ROM")
              ROM,
              @doc("Sensor")
              SENSOR,
              @doc("Software")
              SOFTWARE
          };
        };

        module ErrorConditionEnumModule
        {
          enum ErrorConditionEnumType
          {
              @doc("An error condition is reported and expected to seriously compromise use of the reporting component or device.")
              ERROR,
              @doc("An error condition is reported with severity indicating component or device failure.")
              FAIL,
              @doc("An error condition is reported, but impact on operation and performance is minimal.")
              INFO,
              @doc("No error condition exists.")
              NONE,
              @doc("An error condition is reported and expected to have significant impact on component or device performance.")
              WARN
          };
        };

        module FLSBeamwidthEnumModule
        {
          enum FLSBeamwidthEnumType
          {
              @doc("Beamwidth is medium.")
              MEDIUM,
              @doc("Beamwidth is narrow.")
              NARROW,
              @doc("Beamwidth is wide.")
              WIDE
          };
        };

        module FLSConfigModeEnumModule
        {
          enum FLSConfigModeEnumType
          {
              @doc("Put the sonar into a mode where the configuration is fully determined by the sonar. This allows the sonar developers to test new configurations without hijacking another configuration.")
              DEV_TEST,
              @doc("The vehicle is diving off the surface and needs to quickly get a look of the bottom to determine the terrains threat level.")
              DIVE,
              @doc("The sonar is configured to never make noise or actively ping but still listen for interesting acoustic emissions.")
              PASSIVE_ONLY,
              @doc("The sonar is configured to search the seafloor to find contacts and targets of interest. If this enum member is selected, additional configuration is required.")
              SEARCH_BOTTOM,
              @doc("The sonar is configured to search the volume (area between the surface and the seafloor) to find contacts and targets of interest. If this enum member is selected, additional configuration is required.")
              SEARCH_VOLUME,
              @doc("The vehicle is coming to the surface. The sonar should investigate the surface to determine if it is clear of hazards.")
              SURFACE,
              @doc("Put the sonar into a dedicated mode defined by the operator. Disables the sonar's ability to optimize. If this enum member is selected, additional configuration is required.")
              TEST,
              @doc("The vehicle is intended to be transiting and thus doesn't have to operate at full capacity to save power. Vehicle believes it is in a safe environment or not collecting data.")
              TRANSIT
          };
        };

        module FLSWaveformLengthEnumModule
        {
          enum FLSWaveformLengthEnumType
          {
              @doc("Waveform length is long.")
              _LONG,
              @doc("Waveform length is medium.")
              MEDIUM,
              @doc("Waveform length is short.")
              _SHORT,
              @doc("Waveform length is extra short.")
              XSHORT
          };
        };

        module GPSConstellationEnumModule
        {
          enum GPSConstellationEnumType
          {
              @doc("The Beidou constellation.")
              BEIDOU,
              @doc("The Galileo constellation.")
              GALILEO,
              @doc("The Glonass constellation.")
              GLONASS,
              @doc("The GPS constellation.")
              GPS,
              @doc("The IRNSS constellation.")
              IRNSS,
              @doc("The QZSS constellation.")
              QZSS,
              @doc("The SBAS constellation.")
              SBAS,
              @doc("An unknown constellation.")
              UNKNOWN
          };
        };

        module HandoverResultEnumModule
        {
          enum HandoverResultEnumType
          {
              @doc("Control handover deferred temporarily by current controller")
              DEFERRED,
              @doc("Control handover denied by current controller")
              DENIED,
              @doc("Control handover granted by current controller")
              GRANTED,
              @doc("Control transfer requestor had insufficient authority to take control from current controller")
              INSUFFICIENT_AUTHORITY,
              @doc("Vehicle is unavailable for control handover")
              NOT_AVAILABLE,
              @doc("Control handover timed out because current controller did not respond in the allotted time")
              TIMEOUT
          };
        };

        module HeadingSectorKindEnumModule
        {
          enum HeadingSectorKindEnumType
          {
              @doc("The heading sector kind is inside.")
              INSIDE,
              @doc("The heading sector kind is outside.")
              OUTSIDE
          };
        };

        module HoverKindEnumModule
        {
          enum HoverKindEnumType
          {
              @doc("Prioritize maintaining a latitude/longitude position")
              LAT_LON_PRIORITY,
              @doc("Prioritize maintaining an elevation")
              Z_PRIORITY
          };
        };

        module IgnitionControlEnumModule
        {
          enum IgnitionControlEnumType
          {
              @doc("Stop the engine.")
              OFF,
              @doc("Run the engine.")
              RUN
          };
        };

        module IgnitionStateEnumModule
        {
          enum IgnitionStateEnumType
          {
              @doc("The engine is off.")
              OFF,
              @doc("The engine is running.")
              RUN,
              @doc("The engine is starting.")
              START
          };
        };

        module IlluminatorStateEnumModule
        {
          enum IlluminatorStateEnumType
          {
              @doc("Flashing")
              FLASHING,
              @doc("Off")
              OFF,
              @doc("On")
              ON
          };
        };

        module ImageFormatEnumModule
        {
          enum ImageFormatEnumType
          {
              @doc("Sony Alpha RAW proprietary camera sensor output format")
              ARW,
              @doc("BitMaP image")
              BMP,
              @doc("Canon RAW 2 (version 2) proprietary camera sensor output format")
              CR2_RAW,
              @doc("Digital NeGative image file, a royalty free Adobe format")
              DNG,
              @doc("GEOreferenced JPEG")
              GEOJPEG,
              @doc("GEOreferenced TIFF")
              GEOTIFF,
              @doc("Graphics Interchange Format")
              GIF,
              @doc("Go-Pro RAW proprietary camera sensor output format")
              GPR,
              @doc("Joint Photographic Experts Group (default if optionally specified)")
              JPEG,
              @doc("Nikon Electric Format RAW proprietary camera sensor output format")
              NEF,
              @doc("Portable Gray Map")
              PGM,
              @doc("Portable Network Graphic")
              PNG,
              @doc("Portable aNy Map")
              PNM,
              @doc("Portable Pixmap Format")
              PPM,
              @doc("Tag Image File Format")
              TIFF
          };
        };

        module InertialSensorCmdEnumModule
        {
          enum InertialSensorCmdEnumType
          {
              @doc("Align using the best technique as determined by the inertial sensor")
              BEST_ALIGN,
              @doc("Align using a GPS position feed. This is the standard alignment method.")
              GPS_ALIGN,
              @doc("Initializing state for the INU. This command is also used to restart or stop a running alignment.")
              INIT,
              @doc("Alignment is forced using parameters directly given as input starting values to the inertial sensor")
              SNAP_ALIGN,
              @doc("Align assuming a zero velocity for the system.")
              STATIONARY_ALIGN,
              @doc("Align using non-GPS position source. Typically used when GPS is not available. For example, aligning in a torpedo tube with position fed from the host vessel.")
              TRANSFER_ALIGN
          };
        };

        module InertialSensorOpStatusEnumModule
        {
          enum InertialSensorOpStatusEnumType
          {
              @doc("Failure during self-determined best alignment")
              BEST_ALIGNMENT_FAILURE,
              @doc("Coarse self-determined best alignment")
              COARSE_BEST_ALIGNMENT,
              @doc("Coarse GPS alignment")
              COARSE_GPS_ALIGNMENT,
              @doc("Coarse stationary alignment")
              COARSE_STATIONARY_ALIGNMENT,
              @doc("Coarse transfer alignment")
              COARSE_TRANSFER_ALIGNMENT,
              @doc("Fine self-determined best alignment complete")
              FINE_BEST_ALIGNMENT_COMPLETE,
              @doc("Fine self-determined best alignment started")
              FINE_BEST_ALIGNMENT_STARTED,
              @doc("Fine GPS alignment complete")
              FINE_GPS_ALIGNMENT_COMPLETE,
              @doc("Fine GPS alignment started")
              FINE_GPS_ALIGNMENT_STARTED,
              @doc("Fine stationary alignment complete")
              FINE_STATIONARY_ALIGNMENT_COMPLETE,
              @doc("Fine stationary alignment started")
              FINE_STATIONARY_ALIGNMENT_STARTED,
              @doc("Fine transfer alignment complete")
              FINE_TRANSFER_ALIGNMENT_COMPLETE,
              @doc("Fine transfer alignment started")
              FINE_TRANSFER_ALIGNMENT_STARTED,
              @doc("Failure during a GPS alignment")
              GPS_ALIGNMENT_FAILURE,
              @doc("Inertial sensor failure")
              INERTIAL_SENSOR_FAILURE,
              @doc("Initializing")
              INIT,
              @doc("Snap alignment complete")
              SNAP_ALIGNMENT_COMPLETE,
              @doc("Failure during snap alignment")
              SNAP_ALIGNMENT_FAILURE,
              @doc("Failure during stationary alignment")
              STATIONARY_ALIGNMENT_FAILURE,
              @doc("Failure during transfer alignment")
              TRANSFER_ALIGNMENT_FAILURE
          };
        };

        module InitiatedTestEnumModule
        {
          enum InitiatedTestEnumType
          {
              @doc("Indicates a destructive test.")
              DESTRUCTIVE,
              @doc("Indicates a non-destructive test.")
              NON_DESTRUCTIVE
          };
        };

        module InterferenceEnumModule
        {
          enum InterferenceEnumType
          {
              @doc("Interference type is sound produced by a different sonar system.")
              ACOUSTIC,
              @doc("Interference type is non-sonar based noise.")
              NONACOUSTIC,
              @doc("Interference type is from an undetermined source.")
              UNKNOWN
          };
        };

        module LandmarkEnumModule
        {
          enum LandmarkEnumType
          {
              @doc("Landmark is a cluster object.")
              CLUSTER_OBJECT,
              @doc("Landmark is a large object.")
              LARGE_OBJECT,
              @doc("Landmark is marked by a geographical tag.")
              MARKED,
              @doc("Landmark is terrain.")
              TERRAIN
          };
        };

        module LogLevelEnumModule
        {
          enum LogLevelEnumType
          {
              @doc("An error message level.")
              ERROR,
              @doc("An informational message level.")
              INFORMATION,
              @doc("A warning message level.")
              WARNING
          };
        };

        module MastActionEnumModule
        {
          enum MastActionEnumType
          {
              @doc("set to lower the mast down")
              LOWER,
              @doc("set to raise the mast up")
              RAISE,
              @doc("set to stop the mast")
              STOP
          };
        };

        module MastStateEnumModule
        {
          enum MastStateEnumType
          {
              @doc("set when the mast is down")
              DOWN,
              @doc("set when the mast is moving down")
              MOVING_DOWN,
              @doc("set when the mast is moving up")
              MOVING_UP,
              @doc("set when the mast is not in motion, but between fully up and fully down")
              STOPPED,
              @doc("set when the mast is up")
              UP
          };
        };

        module CommandStatusEnumModule
        {
          enum CommandStatusEnumType
          {
              @doc("The command was canceled by the requestor before the command completed successfully.")
              CANCELED,
              @doc("The command has been placed in the resource's command queue but has not yet been accepted.")
              COMMANDED,
              @doc("The command has been completed successfully.")
              COMPLETED,
              @doc("The command is being performed by the resource and has not yet been completed.")
              EXECUTING,
              @doc("The command has been attempted, but was not successful.")
              FAILED,
              @doc("The command has been issued to the resource (typically a sensor or streaming device), but processing has not yet commenced.")
              ISSUED
          };
        };

        module TaskControlEnumModule
        {
          enum TaskControlEnumType
          {
              @doc("Cancel the mission plan, mission task, or mission objective.")
              CANCEL,
              @doc("Approve the execution of the mission plan, mission task, or mission objective.")
              EXECUTION_APPROVED,
              @doc("Reject the execution of the mission plan, mission task, or mission objective.")
              EXECUTION_NOT_APPROVED,
              @doc("Pause the execution of the approved mission plan, mission task, or mission objective.")
              PAUSE,
              @doc("Plan the mission plan, mission task, or mission objective.")
              PLAN,
              @doc("Queue the mission plan, mission task, or mission objective for execution.")
              QUEUE,
              @doc("Restart the execution of the mission plan, mission task, or mission objective.")
              RESTART,
              @doc("Resume the execution of the mission plan, mission task, or mission objective.")
              RESUME
          };
        };

        module TaskStateEnumModule
        {
          enum TaskStateEnumType
          {
              @doc("The mission plan, mission task, or mission objective is awaiting execution approval.")
              AWAITING_EXECUTION_APPROVAL,
              @doc("The mission plan, mission task, or mission objective has been cancelled.")
              CANCELED,
              @doc("The mission plan, mission task, or mission objective is in the process of being cancelled.")
              CANCELING,
              @doc("The mission plan, mission task, or mission objective been completed. Collection tasks are considered complete when the resulting product is processed and disseminated. All other tasks are complete once the vehicle transitions from the executing state (vehicle releases weapon, stops jamming, etc.).")
              COMPLETED,
              @doc("The mission plan, mission task, or mission objective has begun execution (slews sensor and begins collect, begins to prepare weapons for release, starts jamming, etc.). This state defines the point of no return for a mission plan, mission task, or mission objective. Once transitioning to this state, the mission plan, mission task, or mission objective can no longer be reallocated to another UxS or vehicle unless it transitions to the FAILED state.")
              EXECUTING,
              @doc("The mission plan, mission task, or mission objective been approved for execution.")
              EXECUTION_APPROVED,
              @doc("The mission plan, mission task, or mission objective has failed. The UxS node has determined that no vehicles within the UxS can achieve the mission plan, mission task, or mission objective.")
              FAILED,
              @doc("The mission plan, mission task, or mission objective has not been planned.")
              NOT_PLANNED,
              @doc("The mission plan, mission task, or mission objective has not been queued for execution.")
              NOT_QUEUED,
              @doc("Used to pause the execution of an approved mission plan, approved mission task, or approved mission objective.")
              PAUSED,
              @doc("The mission plan, mission task, or mission objective is in the process of being paused.")
              PAUSING,
              @doc("The mission plan, mission task, or mission objective has been planned, indicating that it is part of an approved and active detailed mission plan.")
              PLANNED,
              @doc("The mission plan, mission task, or mission objective is still in the planning state.")
              PLANNING,
              @doc("The mission plan, mission task, or mission objective has been queued for execution.")
              QUEUED,
              @doc("The mission plan, mission task, or mission objective is being queued (e.g., uploading to vehicle) for execution.")
              QUEUING,
              @doc("The mission plan, mission task, or mission objective is in the process of being restarted.")
              RESTARTING,
              @doc("The mission plan, mission task, or mission objective is in the process of being resumed.")
              RESUMING
          };
        };

        module NavigationSolutionEnumModule
        {
          enum NavigationSolutionEnumType
          {
              @doc("Interpolated, projected, and/or produced through computation.")
              ESTIMATED,
              @doc("Navigation solution from an external source that is considered to be correct.")
              GROUND_TRUTH,
              @doc("Provided by a sensing system.")
              MEASURED
          };
        };

        module ObjectiveExecutorControlEnumModule
        {
          enum ObjectiveExecutorControlEnumType
          {
              @doc("Execute the objective.")
              EXECUTE,
              @doc("Pause the execution of the objective.")
              PAUSE,
              @doc("Resume the execution of a paused objective.")
              RESUME
          };
        };

        module ObjectiveExecutorStateEnumModule
        {
          enum ObjectiveExecutorStateEnumType
          {
              @doc("The objective has been canceled.")
              CANCELED,
              @doc("The objective is in the process of being canceled.")
              CANCELING,
              @doc("The objective been completed. Collection tasks are considered complete when the resulting product is processed and disseminated. All other tasks are complete once the vehicle transitions from the executing state (vehicle releases weapon, stops jamming, etc.).")
              COMPLETED,
              @doc("The objective has begun execution (slews sensor and begins collect, begins to prepare weapons for release, starts jamming, etc.).")
              EXECUTING,
              @doc("The objective has failed.")
              FAILED,
              @doc("The objective executing is being modified.")
              MODIFYING,
              @doc("The objective's execution is paused.")
              PAUSED,
              @doc("The objective is in the process of being paused.")
              PAUSING,
              @doc("The system has queued the objective for future execution.")
              QUEUED,
              @doc("The objective is in the process of being resumed.")
              RESUMING
          };
        };

        module ObjectiveExecutorStateReasonEnumModule
        {
          enum ObjectiveExecutorStateReasonEnumType
          {
              @doc("Indicates transition to CANCELING state due to dispose message.")
              BUS_MSG_DISPOSE,
              @doc("Indicates transition to MODIFYING state due to modification of bus message with same key as executing objective.")
              BUS_MSG_UPDATE,
              @doc("Indicates a transition to FAILED due to current system constraints.")
              CANNOT_PERFORM_UNDER_CONSTRAINTS,
              @doc("Indicates a transition to the FAILED state when the command contains missing, out-of-bounds, or otherwise invalid parameters.")
              COMMAND_VALIDATION_FAILED,
              @doc("Indicates transition due to incoming command.")
              COMMANDED,
              @doc("Indicates transition to FAILED based on failure within the objective executor.")
              INTERNAL_FAILURE,
              @doc("Indicates transition to FAILED based on failure within lower level service leveraged by this objective executor.")
              LOWER_SERVICE_FAILED,
              @doc("Indicates transition to FAILED or PAUSING based on lower level service being interrupted by higher priority request.")
              LOWER_SERVICE_INTERRUPTED,
              @doc("Indicates transition to FAILED based on rejection by lower level service when it was commanded by this objective executor.")
              LOWER_SERVICE_REJECTED,
              @doc("Indicates transition to FAILED based on unresponsiveness of lower level service leveraged by this objective executor.")
              LOWER_SERVICE_TIMEOUT,
              @doc("Indicates transition to FAILED due to another objective arriving at the objective executor.")
              OBJECTIVE_REPLACED,
              @doc("Indicates the conditions to proceed to this state have been met and a normal state transition has occurred.")
              SUCCEEDED
          };
        };

        module OperationalModeControlEnumModule
        {
          enum OperationalModeControlEnumType
          {
              @doc("Sets the operational mode to an unmanned mode where the associated commands that are from the onboard autonomy are allowed to execute.")
              AUTONOMOUS,
              @doc("Sets the operational mode to an unmanned mode where only the associated commands that are from the remote operator are allowed to execute.")
              REMOTE,
              @doc("Sets the operational mode to an unmanned mode where none of the associated commands are allowed to execute.")
              STANDBY
          };
        };

        module OperationalModeEnumModule
        {
          enum OperationalModeEnumType
          {
              @doc("Operating in an unmanned mode where operational commands from onboard autonomy are executed.")
              AUTONOMOUS,
              @doc("Operating in a manned mode where no operational commands can be executed.")
              MANUAL,
              @doc("Operating in an unmanned mode where only operational commands from a remote operator are allowed to execute.")
              REMOTE,
              @doc("Operating in an unmanned mode where no operational commands are allowed to execute.")
              STANDBY
          };
        };

        module PassiveContactFeatureEnumModule
        {
          enum PassiveContactFeatureEnumType
          {
              @doc("Contact has a wide frequence spectrum.")
              BROADBAND,
              @doc("Contact has a narrow frequency spectrum.")
              NARROWBAND,
              @doc("Contact is transitory.")
              TRANSIENT
          };
        };

        module PathWayEnumModule
        {
          enum PathWayEnumType
          {
              @doc("Historical global path")
              HISTORICAL_GLOBAL,
              @doc("Historical local path")
              HISTORICAL_LOCAL,
              @doc("Planned global path")
              PLANNED_GLOBAL,
              @doc("Planned local path")
              PLANNED_LOCAL
          };
        };

        module PowerOnTestEnumModule
        {
          enum PowerOnTestEnumType
          {
              @doc("Indicates that the power on test is disabled, and/or that there is no power on test.")
              DISABLED_NO_TEST,
              @doc("Indicates a full power on test.")
              FULL_TEST,
              @doc("Indicates a quick power on test.")
              QUICK_TEST
          };
        };

        module PowerPlantStateEnumModule
        {
          enum PowerPlantStateEnumType
          {
              @doc("Faulted")
              FAULT,
              @doc("Off")
              OFF,
              @doc("On")
              ON
          };
        };

        module PowerStateEnumModule
        {
          enum PowerStateEnumType
          {
              @doc("Power for the resource is requested/reported to use emergency power.")
              EMERGENCY_POWER,
              @doc("Power for the resource is requested/reported to be off.")
              POWER_OFF,
              @doc("Power for the resource is requested/reported to be on.")
              POWER_ON,
              @doc("Power for the resource is requested/reported to use/be in stand-by mode or not fully powered up: for example if power is provided only to enable communications to the resource.")
              POWER_STANDBY
          };
        };

        module ProcessingUnitEnumModule
        {
          enum ProcessingUnitEnumType
          {
              @doc("Central Processing Unit")
              CPU,
              @doc("Digital Signal Processing Unit")
              DSP,
              @doc("Field-Programmable Gate Array Unit")
              FPGA,
              @doc("Graphics Processing Unit")
              GPU,
              @doc("Neural Processing Unit")
              NPU,
              @doc("Photonic Processing Unit")
              PhPU,
              @doc("Physics Processing Unit")
              PPU,
              @doc("Quantum Processing Unit")
              QPU,
              @doc("Synergistic Processing Unit")
              SPU,
              @doc("Tensor Processing Unit")
              TPU,
              @doc("Vision Processing Unit")
              VPU
          };
        };

        module PumpStateEnumModule
        {
          enum PumpStateEnumType
          {
              @doc("Faulted")
              FAULT,
              @doc("Off")
              OFF,
              @doc("Running forward direction")
              ON_FORWARD,
              @doc("Running reverse direction")
              ON_REVERSE
          };
        };

        module ReferenceFrameOriginEnumModule
        {
          enum ReferenceFrameOriginEnumType
          {
              @doc("Bow Waterline Intersection.")
              BOW_WATERLINE_INTERSECTION,
              @doc("Center of buoyancy.")
              CENTER_OF_BUOYANCY,
              @doc("Center of gravity.")
              CENTER_OF_GRAVITY,
              @doc("INS Location")
              INS_LOCATION,
              @doc("Keel transom intersection")
              KEEL_TRANSOM_INTERSECTION
          };
        };

        module SourceIndicatorEnumModule
        {
          enum SourceIndicatorEnumType
          {
              @doc("Source of data is actual sensor data.")
              ACTUAL,
              @doc("Source of data is ground truth.")
              GROUND_TRUTH,
              @doc("Source of data is simulated sensor data.")
              SIMULATED,
              @doc("Source of data is tentative sensor data.")
              TENTATIVE
          };
        };

        module SpecialManeuverIndicatorEnumModule
        {
          enum SpecialManeuverIndicatorEnumType
          {
              @doc("The vessel is engaged in a special maneuver.")
              ENGAGED,
              @doc("The contact source is explicitly reporting that the special maneuver indicator is not available.")
              NOT_AVAILABLE,
              @doc("The vessel is not engaged in a special maneuver.")
              NOT_ENGAGED,
              @doc("The contact source is not able to determine this information.")
              NOT_PROVIDED
          };
        };

        module TamperDetectionStateEnumModule
        {
          enum TamperDetectionStateEnumType
          {
              @doc("ALWAYS_ENABLED for reporting data; CLEAR for clearing the previous activities")
              ALWAYS_ENABLED_OR_CLEAR,
              @doc("Disabled")
              DISABLED,
              @doc("Enabled")
              ENABLED
          };
        };

        module TFOMEnumModule
        {
          enum TFOMEnumType
          {
              @doc("less than or equal to 1 nanosecond")
              TFOM_1,
              @doc("greater than 1 nanosecond and less than or equal to 10 nanoseconds")
              TFOM_2,
              @doc("greater than 10 nanoseconds and less than or equal to 100 nanoseconds")
              TFOM_3,
              @doc("greater than 100 nanoseconds and less than or equal to 1 microsecond")
              TFOM_4,
              @doc("greater than 1 microsecond and less than or equal to 10 microseconds")
              TFOM_5,
              @doc("greater than 10 microseconds and less than or equal to 100 microseconds")
              TFOM_6,
              @doc("greater than 100 microseconds and less than or equal to 1 millisecond")
              TFOM_7,
              @doc("greater than 1 millisecond and less than or equal to 10 milliseconds")
              TFOM_8,
              @doc("greater than 10 milliseconds")
              TFOM_9
          };
        };

        module TrackCategoryEnumModule
        {
          enum TrackCategoryEnumType
          {
              @doc("Definition to be defined")
              ADS_B_DIRECTIONAL_AIR,
              @doc("Definition to be defined")
              ADS_B_DIRECTIONAL_SURFACE,
              @doc("Definition to be defined")
              ADS_B_NONDIRECTIONAL_AIR,
              @doc("Definition to be defined")
              ADS_B_NONDIRECTIONAL_SURFACE,
              @doc("Air")
              AIR,
              @doc("Definition to be defined")
              ASW,
              @doc("Emergency")
              EMERGENCY,
              @doc("Definition to be defined")
              EW,
              @doc("Land Point")
              LAND_POINT,
              @doc("Land Track")
              LAND_TRACK,
              @doc("Definition to be defined")
              MP_AREA,
              @doc("Definition to be defined")
              MP_LINE,
              @doc("Definition to be defined")
              NA,
              @doc("Definition to be defined")
              NO_STATEMENT,
              @doc("Definition to be defined")
              POINTER,
              @doc("Definition to be defined")
              REF_POINT,
              @doc("Definition to be defined")
              SP_AREA,
              @doc("Space")
              SPACE,
              @doc("Below the surface")
              SUB_SURFACE,
              @doc("Surface")
              SURFACE
          };
        };

        module TrackIdentityEnumModule
        {
          enum TrackIdentityEnumType
          {
              @doc("A track which is assumed to be a friend because of its characteristics, behavior, or origin")
              ASSUMED_FRIEND,
              @doc("A friendly track acting as a \"suspect\" track for exercise purposes only")
              FAKER,
              @doc("A track belonging to a declared friendly nation")
              FRIEND,
              @doc("A track which is eligible to be engaged")
              HOSTILE,
              @doc("A friendly track acting as a \"hostile\" track for exercise purposes only")
              JOKER,
              @doc("A track whose characteristics, behavior, origin, or nationality indicate that it is neither supporting nor opposing friendly forces")
              NEUTRAL,
              @doc("A track for which identification is to be determined")
              PENDING,
              @doc("A track which is potentially hostile because of its characteristics, behavior, origin or nationality")
              SUSPECT,
              @doc("An evaluated track which has not been identified")
              UNKNOWN
          };
        };

        module TriggerStateEnumModule
        {
          enum TriggerStateEnumType
          {
              @doc("A canceling state.")
              CANCEL,
              @doc("A pausing state.")
              PAUSE,
              @doc("A planning state.")
              PLAN,
              @doc("A queueing state.")
              QUEUE,
              @doc("A restarting state.")
              RESTART,
              @doc("A resuming state.")
              RESUME
          };
        };

        module VehicleSpeedModeEnumModule
        {
          enum VehicleSpeedModeEnumType
          {
              @doc("Long Range Cruise. A speed that optimizes time, distance and fuel consumption for a vehicle (definition of \"optimized\" is subjective. Example: for a planing hull, this is usually the minimum planing speed, even though lower speeds can achieve longer endurance or range.)")
              LRC,
              @doc("Maximum Endurance Cruise. The speed that maximizes the time a vehicle can travel.")
              MEC,
              @doc("Maximum Range Cruise. The speed that maximizes the distance a vehicle can travel.")
              MRC,
              @doc("Slow speed. Minimum speed at which the vehicle can operate (definition of \"operate\" is subjective. Example: minimum speed to achieve maneuverability, engine idle speed/gear clutched in \"idle ahead\", etc.)")
              SLOW,
              @doc("Preset speed for the vehicle, that is in the range of speeds for the subject vehicle")
              VEHICLE_SPECIFIC
          };
        };

        module VisualClassificationEnumModule
        {
          enum VisualClassificationEnumType
          {
              @doc("Channel marker used as an aid to navigation.")
              AID_TO_NAVIGATION_CHANNEL_MARKER,
              @doc("General aid to navigation.")
              AID_TO_NAVIGATION_GENERAL,
              @doc("Large buoy used as an aid to navigation.")
              AID_TO_NAVIGATION_LARGE_BUOY,
              @doc("Lighthouse used as an aid to navigation.")
              AID_TO_NAVIGATION_LIGHTHOUSE,
              @doc("Small buoy used as an aid to navigation.")
              AID_TO_NAVIGATION_SMALL_BUOY,
              @doc("Large general obstacle.")
              LARGE_GENERAL_OBSTACLE,
              @doc("Large cargo vehicle.")
              LARGE_VESSEL_CARGO,
              @doc("Large general vehicle.")
              LARGE_VESSEL_GENERAL,
              @doc("Large military vehicle.")
              LARGE_VESSEL_MILITARY,
              @doc("Large vehicle that does not fit into other LARGE_VESSEL categories.")
              LARGE_VESSEL_OTHER,
              @doc("Large passenger vehicle.")
              LARGE_VESSEL_PASSENGER,
              @doc("Fishing vehicle.")
              MEDIUM_VESSEL_FISHING,
              @doc("Medium general vehicle.")
              MEDIUM_VESSEL_GENERAL,
              @doc("Medium military vehicle.")
              MEDIUM_VESSEL_MILITARY,
              @doc("Medium vehicle that does not fit into other MEDIUM_VESSEL categories.")
              MEDIUM_VESSEL_OTHER,
              @doc("Tug vehicle.")
              MEDIUM_VESSEL_TUG,
              @doc("Tug vehicle towing another vehicle.")
              MEDIUM_VESSEL_TUG_IN_TOW,
              @doc("Yacht.")
              MEDIUM_VESSEL_YACHT,
              @doc("Sailboat.")
              SAILBOAT,
              @doc("Small general obstacle.")
              SMALL_GENERAL_OBSTACLE,
              @doc("Small general vehicle.")
              SMALL_VESSEL_GENERAL,
              @doc("Jet ski.")
              SMALL_VESSEL_JET_SKI,
              @doc("Small military vehicle.")
              SMALL_VESSEL_MILITARY,
              @doc("Small vehicle that does not fit into other SMALL_VESSEL categories.")
              SMALL_VESSEL_OTHER,
              @doc("Power boat.")
              SMALL_VESSEL_POWER_BOAT
          };
        };

        module WaterTurnDirectionEnumModule
        {
          enum WaterTurnDirectionEnumType
          {
              @doc("The vehicle will make left turns.")
              LEFT_TURN,
              @doc("The vehicle will make right turns.")
              RIGHT_TURN
          };
        };

        module WaterZoneKindEnumModule
        {
          enum WaterZoneKindEnumType
          {
              @doc("Defines a zone that the vehicle is required to stay inside.")
              INSIDE,
              @doc("Defines a zone that the vehicle is required to stay outside.")
              OUTSIDE
          };
        };

        module WaypointStateEnumModule
        {
          enum WaypointStateEnumType
          {
              @doc("Waypoint is complete and achieved within tolerance.")
              ACHIEVED,
              @doc("Waypoint is complete, but not achieved within tolerance.")
              COMPLETED,
              @doc("Waypoint is executing.")
              EXECUTING,
              @doc("Waypoint failed to complete.")
              FAILED,
              @doc("Waypoint is queued for execution.")
              QUEUED
          };
        };


    };
  };
};

#endif // _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_MARITIMEENUMERATIONSETS

